#!/usr/bin/env -S uv run --script
# /// script
# dependencies = [
#   "blessed >= 1.21.0",
# ]
# ///
"""
Tmux Pane Text Capture and Selection Tool

This tool captures content from the current tmux pane, finds text patterns
(URLs, git commits, emails, GitHub repositories, IP addresses with optional ports,
file paths, MAC addresses, UUIDs, hex colors, markdown links, git diff files,
Docker SHA256 hashes, IPv6 addresses, memory addresses, IPFS hashes, and large numbers),
and provides an interactive interface for selecting and copying text to the clipboard.

Features:
- Pattern matching for URLs, git commits, emails, GitHub repositories, IP addresses
  with optional ports, file paths, MAC addresses, UUIDs, hex colors, markdown links,
  git diff files, Docker SHA256 hashes, IPv6 addresses, memory addresses, IPFS hashes,
  and large numbers
- Interactive hint-based selection system with vim-friendly homerow keys
- Support for multiple keyboard layouts (qwerty, azerty, qwertz, dvorak, colemak)
- Cross-platform clipboard support (macOS, Linux)
- Gruvbox-style color theming
- ANSI escape sequence handling for styled terminal output

Usage:
    tmuxcapture

Requirements:
    - tmux running with active pane
    - blessed library for terminal UI
    - Platform-specific clipboard utilities (pbcopy/xclip/xsel)
"""

import subprocess
import re
import sys
import string
import math
import os
import termios
import tty
from itertools import product, islice
import blessed
from typing import Dict, List, Tuple, Optional


# --- Global Color Configuration (Gruvbox Style) ---
class ColorConfig:
    MATCH_HIGHLIGHT_BG = "#458588"
    HINT_DEFAULT_FG = "#282828"
    HINT_DEFAULT_BG = "#fabd2f"
    HINT_TYPED_FG = "#fbf1c7"
    HINT_TYPED_BG = "#fb4934"
    HINT_PENDING_FG = "#282828"
    HINT_PENDING_BG = "#fabd2f"
    HINT_INACTIVE_FG = "#928374"
    HINT_INACTIVE_BG = "#3c3836"


# --- Alphabet Configuration ---
ALPHABETS = {
    "numeric": "1234567890",
    "abcd": "abcd",
    "vim": "hjklasdfzxcvbnmqwertyuiop",
    "vim-homerow": "hjklasdfg",
    "vim-movement": "hjklwbef",
    "qwerty": "asdfqwerzxcvjklmiuopghtybn",
    "qwerty-homerow": "asdfjklgh",
    "qwerty-left-hand": "asdfqwerzcxv",
    "qwerty-right-hand": "jkluiopmyhn",
    "azerty": "qsdfazerwxcvjklmuiopghtybn",
    "azerty-homerow": "qsdfjkmgh",
    "azerty-left-hand": "qsdfazerwxcv",
    "azerty-right-hand": "jklmuiophyn",
    "qwertz": "asdfqweryxcvjkluiopmghtzbn",
    "qwertz-homerow": "asdfghjkl",
    "qwertz-left-hand": "asdfqweryxcv",
    "qwertz-right-hand": "jkluiopmhzn",
    "dvorak": "aoeuqjkxpyhtnsgcrlmwvzfidb",
    "dvorak-homerow": "aoeuhtnsid",
    "dvorak-left-hand": "aoeupqjkyix",
    "dvorak-right-hand": "htnsgcrlmwvz",
    "colemak": "arstqwfpzxcvneioluymdhgjbk",
    "colemak-homerow": "arstneiodh",
    "colemak-left-hand": "arstqwfpzxcv",
    "colemak-right-hand": "neioluymjhk",
}

# Default to vim movement keys
DEFAULT_ALPHABET = "vim-movement"

# --- Regular Expression Patterns ---
REGEX_PATTERNS = {
    "GIT_COMMIT": r"\b[0-9a-f]{7,40}\b",
    "URL": r"(?:https?://|git@|git://|ssh://|ftp://|file:///)[^ ]+",
    "EMAIL": r"\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b",
    "GITHUB_REPO": r"(?:https?://github\.com/|git@github\.com:|ssh@github\.com:)[-a-zA-Z0-9_]+/(?:[-a-zA-Z0-9_]|\.)+(?:\.git)?",
    "IP_ADDRESS": r"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?::\d+)?\b",
    "FILE_PATH": r"(?:[.\w\-@$~\[\] ]+)?(?:/[.\w\-@$\[\] ]+)+",
    "MAC_ADDRESS": r"\b(?:[0-9A-Fa-f]{2}[:-]){5}[0-9A-Fa-f]{2}\b",
    "UUID": r"\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b",
    "HEX_COLOR": r"#[0-9a-fA-F]{6}\b",
    "MARKDOWN_URL": r"\[[^\]]*\]\(([^)]+)\)",
    "DIFF_SUMMARY": r"diff --git a/([^ ]+) b/([^ ]+)",
    "DIFF_A": r"--- a/([^ ]+)",
    "DIFF_B": r"\+\+\+ b/([^ ]+)",
    "DOCKER_SHA": r"sha256:([0-9a-f]{64})",
    "IPV6": r"[A-f0-9:]+:+[A-f0-9:]+[%\w\d]*",
    "HEX_ADDRESS": r"0x[0-9a-fA-F]+",
    "IPFS_HASH": r"\bQm[0-9a-zA-Z]{44}\b",
    "LARGE_NUMBER": r"\b[0-9]{4,}\b",
}


# --- Helper Functions ---


def ensure_terminal_control() -> bool:
    """Ensure proper terminal control for interactive input, similar to nvim's approach.

    This function automatically detects if stdin is properly connected to an interactive
    terminal and fixes it if necessary, making the application work reliably in all
    environments (direct execution, tmux, shell scripts, etc.) without requiring
    external shell redirections.

    Returns:
        bool: True if terminal control was established successfully, False otherwise
    """
    try:
        # Check if we already have a proper TTY
        if os.isatty(sys.stdin.fileno()):
            # Double-check: try to get terminal attributes
            try:
                termios.tcgetattr(sys.stdin.fileno())
                # stdin is a real TTY with terminal attributes
                return True
            except (termios.error, OSError):
                # stdin reports as TTY but doesn't have terminal attributes
                # This can happen in some virtualized or redirected environments
                pass

        # stdin is not a proper TTY or doesn't have terminal attributes
        # Try to open the controlling terminal directly
        try:
            # Open /dev/tty for both reading and writing
            tty_fd = os.open("/dev/tty", os.O_RDWR)

            # Verify it's actually a terminal with proper attributes
            termios.tcgetattr(tty_fd)

            # Replace stdin with the control terminal
            # This is the key step that makes us behave like nvim
            os.dup2(tty_fd, sys.stdin.fileno())

            # Close the original fd since we've duplicated it
            os.close(tty_fd)

            # Verify the replacement worked
            if os.isatty(sys.stdin.fileno()):
                try:
                    termios.tcgetattr(sys.stdin.fileno())
                    return True
                except (termios.error, OSError):
                    pass

        except (OSError, termios.error) as e:
            # Failed to open /dev/tty or set terminal attributes
            # This might happen in non-interactive environments (CI, containers, etc.)
            print(
                f"Warning: Could not establish terminal control: {e}", file=sys.stderr
            )
            print(
                "The application may not respond to keyboard input properly.",
                file=sys.stderr,
            )
            return False

    except Exception as e:
        # Unexpected error - better to continue than crash
        print(f"Warning: Terminal control setup failed: {e}", file=sys.stderr)
        return False

    return False


def hex_to_rgb(hex_color: str) -> tuple[int, int, int]:
    """Convert #RRGGBB format hex color string to (r, g, b) tuple."""
    hex_color = hex_color.lstrip("#")
    if len(hex_color) != 6:
        raise ValueError("Invalid hex color format")
    return tuple(int(hex_color[i : i + 2], 16) for i in (0, 2, 4))


def calculate_visual_positions(
    line_with_ansi: str, term: blessed.Terminal
) -> dict[int, int]:
    """Calculate mapping from visual column positions to character indices.

    ANSI escape sequences don't occupy visual space but do take up character positions.
    This function creates a mapping to convert between visual positions (for display)
    and raw character indices (for text extraction).

    Args:
        line_with_ansi: Raw line string containing ANSI escape sequences
        term: blessed.Terminal instance for character length calculation

    Returns:
        Dictionary mapping visual column positions to character indices
    """
    visual_pos_cache = {}
    visual_col = 0
    char_idx = 0

    # Scan through line character by character to build position mapping
    while char_idx < len(line_with_ansi):
        char = line_with_ansi[char_idx]
        if char == "\x1b":  # ANSI escape sequence start
            # Match full ANSI sequence (e.g., \x1b[31m for red color)
            match = re.match(r"\x1b\[[0-9;]*m", line_with_ansi[char_idx:])
            if match:
                char_idx += len(match.group(0))  # Skip entire sequence
                continue

        # Map visual position to character index for visible characters
        visual_pos_cache[visual_col] = char_idx
        visual_col += term.length(line_with_ansi[char_idx : char_idx + 1])
        char_idx += 1

    return visual_pos_cache


def determine_hint_style(
    hint: str,
    current_input: str,
    style_default: str,
    style_typed: str,
    style_pending: str,
    style_inactive: str,
    term_normal: str,
) -> str:
    """Determine the appropriate styling for a hint based on user input.

    Args:
        hint: The hint string to style
        current_input: Current user input string
        style_default: Default hint style (no input)
        style_typed: Style for typed portion of hint
        style_pending: Style for pending portion of hint
        style_inactive: Style for inactive hints
        term_normal: Terminal normal style reset

    Returns:
        Styled hint string ready for display
    """
    if not current_input:
        # No input yet - show all hints in default style
        return style_default + hint + term_normal
    elif hint.startswith(current_input):
        # Hint matches current input - split into typed and pending parts
        typed_part = current_input
        pending_part = hint[len(typed_part) :]
        return style_typed + typed_part + style_pending + pending_part + term_normal
    else:
        # Hint doesn't match current input - show as inactive
        return style_inactive + hint + term_normal


def is_valid_hint_input(
    current_input: str, hint_to_match: dict[str, dict]
) -> tuple[bool, bool]:
    """Check if current input is valid and determine if selection should be made.

    Args:
        current_input: Current user input string
        hint_to_match: Dictionary mapping hints to match objects

    Returns:
        Tuple of (input_has_matches, should_select)
        - input_has_matches: True if input matches at least one hint prefix
        - should_select: True if input exactly matches a hint and is not a prefix of others
    """
    # Check if any hints start with current input
    input_has_matches = any(h.startswith(current_input) for h in hint_to_match)

    # Check if input matches exactly and is not a prefix of others
    should_select = False
    if current_input in hint_to_match:
        # Only select if input is complete hint and not a prefix
        is_prefix_of_others = any(
            h.startswith(current_input) and h != current_input for h in hint_to_match
        )
        should_select = not is_prefix_of_others

    return input_has_matches, should_select


def group_matches_by_content(matches: list[dict]) -> dict[str, list[dict]]:
    """Group matches by their text content to reduce hint count.

    Args:
        matches: List of match dictionaries with text, position, and styling info

    Returns:
        Dictionary mapping text content to list of match dictionaries
    """
    content_groups = {}
    for match in matches:
        content = match["text"]
        if content not in content_groups:
            content_groups[content] = []
        content_groups[content].append(match)
    return content_groups


def _resolve_overlapping_matches(matches: list[dict]) -> list[dict]:
    """Resolve overlapping matches by selecting the best match for each overlap.

    Priority rules:
    1. Longer matches are preferred over shorter ones
    2. For same-length matches, more specific patterns are preferred:
       - EMAIL/URL over LARGE_NUMBER
       - Specific patterns over generic ones
    3. Earlier patterns in REGEX_PATTERNS dict are preferred for ties

    Args:
        matches: List of match dictionaries with position and pattern info

    Returns:
        List of non-overlapping matches with best match selected for each overlap
    """
    if not matches:
        return matches

    # Define pattern priority (lower number = higher priority)
    pattern_priority = {
        "EMAIL": 1,
        "URL": 1,
        "GITHUB_REPO": 2,
        "GIT_COMMIT": 3,
        "UUID": 4,
        "IP_ADDRESS": 5,
        "IPV6": 5,
        "MAC_ADDRESS": 6,
        "HEX_COLOR": 7,
        "DOCKER_SHA": 8,
        "FILE_PATH": 9,
        "MARKDOWN_URL": 10,
        "DIFF_SUMMARY": 11,
        "DIFF_A": 11,
        "DIFF_B": 11,
        "HEX_ADDRESS": 12,
        "IPFS_HASH": 13,
        "LARGE_NUMBER": 20,  # Lowest priority - very generic
    }

    # Sort matches by line, then by start position
    sorted_matches = sorted(matches, key=lambda x: (x["line_idx"], x["start_col"]))

    result = []
    for current_match in sorted_matches:
        current_start = current_match["start_col"]
        current_end = current_match["end_col"]
        current_line = current_match["line_idx"]

        # Check if this match overlaps with any already selected match on the same line
        overlaps_with_existing = False
        for i, existing_match in enumerate(result):
            if existing_match["line_idx"] != current_line:
                continue  # Different lines, no overlap possible

            existing_start = existing_match["start_col"]
            existing_end = existing_match["end_col"]

            # Check for overlap: ranges [a,b) and [c,d) overlap if max(a,c) < min(b,d)
            if max(current_start, existing_start) < min(current_end, existing_end):
                overlaps_with_existing = True

                # Determine which match is better
                current_length = current_end - current_start
                existing_length = existing_end - existing_start

                current_priority = pattern_priority.get(current_match["pattern"], 15)
                existing_priority = pattern_priority.get(existing_match["pattern"], 15)

                # Prefer longer matches, then higher priority patterns
                if current_length > existing_length or (
                    current_length == existing_length
                    and current_priority < existing_priority
                ):
                    # Current match is better, replace the existing one
                    result[i] = current_match

                break  # Only need to check first overlap

        if not overlaps_with_existing:
            result.append(current_match)

    return result


def find_text_matches(
    lines_with_ansi: list[str], patterns: dict[str, str], term: blessed.Terminal
) -> list[dict]:
    """Find all text pattern matches in tmux pane lines.

    Searches for regex patterns in ANSI-stripped lines while preserving
    the original styled segments for display purposes.

    Args:
        lines_with_ansi: List of raw lines with ANSI escape sequences
        patterns: Dictionary of pattern names to regex strings
        term: blessed.Terminal instance for ANSI processing

    Returns:
        List of match dictionaries with text, position, and styling info
    """
    found_matches = []

    for line_idx, line_with_ansi in enumerate(lines_with_ansi):
        clean_line = term.strip_seqs(
            line_with_ansi
        )  # Remove ANSI sequences for pattern matching

        # Create mapping from visual column positions to character indices
        visual_pos_cache = calculate_visual_positions(line_with_ansi, term)

        # Search for all regex patterns in the cleaned line
        for pattern_name, pattern_str in patterns.items():
            for m in re.finditer(pattern_str, clean_line):
                start_col, end_col = m.start(), m.end()

                # Map visual positions back to raw character indices
                ansi_start_idx = visual_pos_cache.get(start_col)
                ansi_end_idx = visual_pos_cache.get(end_col)
                if ansi_end_idx is None:
                    # If end position not found, use end of line
                    ansi_end_idx = visual_pos_cache.get(
                        len(clean_line), len(line_with_ansi)
                    )

                if ansi_start_idx is None:
                    continue  # Skip if start position not found

                # Extract original segment with ANSI formatting preserved
                original_styled_segment = line_with_ansi[ansi_start_idx:ansi_end_idx]
                found_matches.append(
                    {
                        "text": m.group(0),
                        "line_idx": line_idx,
                        "start_col": start_col,
                        "end_col": end_col,
                        "pattern": pattern_name,
                        "original_styled_segment": original_styled_segment,
                    }
                )

    # Remove overlapping matches, keeping the best one for each overlap
    return _resolve_overlapping_matches(found_matches)


def generate_hints(count: int, alphabet_key: str = DEFAULT_ALPHABET) -> list[str]:
    """Generate keyboard hints that are prefix-free and optimally short.

    This function implements a greedy algorithm based on optimal substructure to create
    the shortest possible prefix-free hint strings. The algorithm uses dynamic programming
    principles to find the optimal distribution of hint lengths.

    MATHEMATICAL FOUNDATION:
    ========================

    For an alphabet of size 'a' and required hint count 'count', we need to find the
    optimal distribution of hints with different lengths to minimize the maximum length.

    OPTIMAL SUBSTRUCTURE PROPERTY:
    The optimal solution for count 'n' can be constructed from optimal solutions for
    smaller subproblems. If we use some single-character hints, the remaining hints
    can be solved optimally as a smaller subproblem.

    RECURSIVE FORMULATION:
    =====================

    Base Cases:
    1. If count <= a: Use single-character hints (length 1)
    2. If count > a: We need multi-character hints

    Recursive Case:
    Let L be the minimum length such that we can generate 'count' hints using
    lengths up to L. Then:
    - a^1 + a^2 + ... + a^L >= count
    - a^1 + a^2 + ... + a^(L-1) < count

    GREEDY STRATEGY - OPTIMAL DISTRIBUTION:
    ======================================

    For any length L, the total possible hints using lengths 1 to L is:
    Total = a^1 + a^2 + ... + a^L = a*(a^L - 1)/(a-1)

    To minimize the maximum length while being prefix-free, we use a greedy approach:
    1. Use as many short hints (length L-1) as possible
    2. Use long hints (length L) only when necessary

    KEY INSIGHT: If we reserve 'r' characters as prefixes for long hints, we lose
    'r' short hints but gain 'r*a' long hints. The net gain is r*a - r = r*(a-1).

    MATHEMATICAL DERIVATION:
    =======================

    Let n_short = number of hints with length L-1
    Let n_long = number of hints with length L

    We need: n_short + n_long = count

    The available space for short hints is: a^(L-1) - reserved_prefixes
    The available space for long hints is: reserved_prefixes * a

    To minimize reserved_prefixes while satisfying count:
    n_short = a^(L-1) - reserved_prefixes
    n_long = reserved_prefixes * a

    From n_short + n_long = count:
    (a^(L-1) - reserved_prefixes) + (reserved_prefixes * a) = count
    a^(L-1) - reserved_prefixes + reserved_prefixes * a = count
    a^(L-1) + reserved_prefixes * (a - 1) = count
    reserved_prefixes = (count - a^(L-1)) / (a - 1)

    Since reserved_prefixes must be integer and we want to minimize the maximum length:
    reserved_prefixes = ceil((count - a^(L-1)) / (a - 1))

    But we can rewrite this as:
    n_short = a^(L-1) - reserved_prefixes = a^(L-1) - ceil((count - a^(L-1)) / (a - 1))

    Using the identity: a^(L-1) + a^(L-1) + ... + a^(L-1) = a^L (a times)
    And: a^L - count = excess capacity

    We get: n_short = floor((a^L - count) / (a - 1))
    This is the GREEDY OPTIMAL FORMULA.

    ALGORITHM CORRECTNESS:
    =====================

    1. OPTIMALITY: The greedy choice (maximizing short hints) is optimal because:
       - Any other distribution would require more total characters
       - The prefix-free constraint is maintained by construction

    2. GREEDY PROPERTY: At each step, we make the locally optimal choice:
       - Use the shortest possible hints first
       - Reserve the minimum number of prefixes for longer hints

    3. OPTIMAL SUBSTRUCTURE: The problem exhibits optimal substructure:
       - If we fix the number of short hints, the remaining long hints form
         an independent optimal subproblem

    COMPLEXITY ANALYSIS:
    ===================

    Time Complexity: O(count) - We generate exactly 'count' hints
    Space Complexity: O(count) - We store exactly 'count' hints

    The algorithm is optimal in terms of hint length distribution.

    Args:
        count (int): The total number of hints to generate.
        alphabet_key (str, optional): The key from the ALPHABETS dictionary for
            the desired alphabet. Defaults to "vim-movement".

    Returns:
        list[str]: A list of unique, prefix-free hint strings with optimal length distribution.

    Examples:
        >>> # Case 1: count <= alphabet size (single-character optimal)
        >>> generate_hints(5, "vim-movement")  # alphabet size = 8
        ['h', 'j', 'k', 'l', 'w']

        >>> # Case 2: count > alphabet size (mixed-length optimal)
        >>> generate_hints(10, "vim-movement")  # 8 < 10 < 64
        ['h', 'j', 'k', 'l', 'w', 'b', 'e', 'fh', 'fj', 'fk']
        # Analysis: L=2, n_short=7, n_long=3
        # 7 single chars + 3 two-char hints = 10 total

        >>> # Case 3: Large count requiring 3-character hints
        >>> generate_hints(20, "abcd")  # 16 < 20 < 64
        # Analysis: L=3, n_short=floor((64-20)/3)=14, n_long=6
        # 14 two-char hints + 6 three-char hints = 20 total
    """
    # ALGORITHM IMPLEMENTATION
    # ========================

    hints = []
    alphabet = ALPHABETS.get(alphabet_key, ALPHABETS[DEFAULT_ALPHABET])

    # Edge case: no hints needed
    if count <= 0:
        return []

    # Step 1: Initialize alphabet size
    # This is the base of our exponential calculations
    a = len(alphabet)

    # Step 2: Find minimum required length L
    # We need the smallest L such that we can generate 'count' hints
    # using lengths up to L. This satisfies: a^(L-1) < count <= a^L
    if a == 0 and count > 0:
        return []  # Impossible to generate hints with empty alphabet

    L = 1
    while a**L < count:
        L += 1

    # MATHEMATICAL INSIGHT: At this point, we have:
    # - a^(L-1) < count <= a^L
    # - L is the minimum length needed for the longest hints

    # Step 3: Base case optimization
    # If L=1, all hints can be single characters (optimal case)
    if L == 1:
        return list(alphabet)[:count]

    # Step 4: Apply greedy optimal formula
    # This is the core of our algorithm: optimal distribution calculation
    #
    # DERIVATION RECAP:
    # - We want n_short hints of length L-1 and n_long hints of length L
    # - Total capacity with L-1 length: a^(L-1)
    # - Total capacity with L length: a^L
    # - We need: n_short + n_long = count
    # - Available space: n_short <= a^(L-1) - reserved_prefixes
    # - Long hints: n_long = reserved_prefixes * a
    # - Solving: n_short = floor((a^L - count) / (a - 1))

    n_short = math.floor((a**L - count) / (a - 1))
    n_long = count - n_short

    # CORRECTNESS CHECK: Verify our calculation
    # - n_short >= 0 (we never generate negative short hints)
    # - n_long >= 0 (we never generate negative long hints)
    # - n_short + n_long = count (total count matches requirement)

    hints = []

    # Step 5: Generate short hints (length L-1)
    # Create all possible combinations of length L-1
    # We'll use the first n_short as actual hints
    short_hint_candidates = ("".join(p) for p in product(alphabet, repeat=L - 1))

    # Take exactly n_short combinations as short hints
    hints.extend(islice(short_hint_candidates, n_short))

    # ALGORITHM EFFICIENCY: The iterator continues from where islice left off
    # This means short_hint_candidates now points to the combinations we'll
    # use as prefixes for long hints. This is memory-efficient as we don't
    # store all combinations at once.

    # Step 6: Generate long hints (length L)
    # Use remaining combinations as prefixes for long hints
    long_hint_prefixes = short_hint_candidates

    # GREEDY STRATEGY: We generate long hints by extending prefixes
    # This maintains the prefix-free property by construction:
    # - All short hints are different from long hint prefixes
    # - All long hints have different prefixes or different suffixes
    n_long_generated = 0
    for prefix in long_hint_prefixes:
        for char in alphabet:
            if n_long_generated >= n_long:
                break  # We've generated exactly n_long long hints
            hints.append(prefix + char)
            n_long_generated += 1

    # INVARIANT MAINTAINED: At this point:
    # - len(hints) = n_short + n_long = count
    # - All hints are prefix-free (no hint is a prefix of another)
    # - The distribution is optimal (minimizes maximum hint length)

    return hints


def get_tmux_pane_content(pane_id: str = None) -> list[str]:
    """Capture the content of the specified tmux pane.

    Executes 'tmux capture-pane -p -e -J' to get the pane content with:
    - -p: Print to stdout
    - -e: Include escape sequences
    - -J: Join wrapped lines
    - -t: Target pane (if specified)

    Args:
        pane_id: Target pane ID (e.g., "%1"). If None, captures current pane.

    Returns:
        List of lines from the tmux pane, or error messages if capture fails
    """
    try:
        cmd = ["tmux", "capture-pane", "-p", "-e", "-J"]
        if pane_id:
            cmd.extend(["-t", pane_id])

        result = subprocess.run(
            cmd, capture_output=True, text=True, check=True, encoding="utf-8"
        )
        return result.stdout.splitlines()
    except FileNotFoundError:
        return ["Error: 'tmux' command not found."]
    except subprocess.CalledProcessError as e:
        return [f"Error capturing tmux pane: {e.stderr}"]


def assign_hints_to_groups(
    content_groups: dict[str, list[dict]], alphabet_key: str = DEFAULT_ALPHABET
) -> dict[str, str]:
    """Assign hints to content groups efficiently.

    Args:
        content_groups: Dictionary mapping text content to list of matches
        alphabet_key: Key from ALPHABETS dict to use for hint generation

    Returns:
        Dictionary mapping text content to assigned hint
    """
    unique_contents = list(content_groups.keys())
    hints = generate_hints(len(unique_contents), alphabet_key)
    return dict(zip(unique_contents, hints))


def run_blessed_app(
    term: blessed.Terminal, original_ansi_lines: list[str], matches_info: list[dict]
) -> str | None:
    """Run the interactive terminal UI for text selection.

    Displays the tmux pane content with highlighted matches and interactive hints.
    Users can type hint characters to select text for copying.

    Args:
        term: blessed.Terminal instance
        original_ansi_lines: List of original pane lines with ANSI codes
        matches_info: List of match dictionaries with hint, text, position info

    Returns:
        Selected text string if user made a selection, None if cancelled
    """
    # Group matches by content and assign hints
    content_groups = group_matches_by_content(matches_info)
    content_to_hint = assign_hints_to_groups(content_groups)

    # Add hints to all matches based on their content
    for match in matches_info:
        match["hint"] = content_to_hint[match["text"]]

    # Create lookup dictionary for quick hint-to-content mapping
    hint_to_content = {hint: content for content, hint in content_to_hint.items()}

    color_config = ColorConfig
    try:
        # Pre-compute all terminal style strings for better performance
        style_match_highlight = term.on_color_rgb(
            *hex_to_rgb(color_config.MATCH_HIGHLIGHT_BG)
        )
        style_hint_default = term.color_rgb(
            *hex_to_rgb(color_config.HINT_DEFAULT_FG)
        ) + term.on_color_rgb(*hex_to_rgb(color_config.HINT_DEFAULT_BG))
        style_hint_typed = (
            term.bold
            + term.color_rgb(*hex_to_rgb(color_config.HINT_TYPED_FG))
            + term.on_color_rgb(*hex_to_rgb(color_config.HINT_TYPED_BG))
        )
        style_hint_pending = term.color_rgb(
            *hex_to_rgb(color_config.HINT_PENDING_FG)
        ) + term.on_color_rgb(*hex_to_rgb(color_config.HINT_PENDING_BG))
        style_hint_inactive = (
            term.dim
            + term.color_rgb(*hex_to_rgb(color_config.HINT_INACTIVE_FG))
            + term.on_color_rgb(*hex_to_rgb(color_config.HINT_INACTIVE_BG))
        )
    except ValueError as e:
        print(f"Color configuration error: {e}", file=sys.stderr)
        sys.exit(1)

    # Enter fullscreen interactive mode
    with term.fullscreen(), term.cbreak(), term.hidden_cursor():
        current_hint_input = ""
        selected_text = None
        while True:
            # Clear screen and redraw original pane content
            print(term.clear, end="")

            # Calculate visible area constraints
            visible_lines = min(len(original_ansi_lines), term.height)
            visible_content = original_ansi_lines[:visible_lines]

            # Display only the content that fits in the terminal
            for line_idx, line in enumerate(visible_content):
                if line_idx < term.height:
                    # Truncate line if it's too wide for terminal
                    truncated_line = (
                        line[: term.width]
                        if len(term.strip_seqs(line)) > term.width
                        else line
                    )
                    print(term.move_xy(0, line_idx) + truncated_line, end="")

            # Draw all matches with highlights and hints
            for match in matches_info:
                x, y = match["start_col"], match["line_idx"]

                # Skip matches outside visible area with proper bounds checking
                if y >= visible_lines or y < 0 or x < 0 or x >= term.width:
                    continue

                # Apply highlighting style using string concatenation
                highlighted_segment = (
                    style_match_highlight
                    + match["original_styled_segment"]
                    + term.normal
                )
                print(term.move_xy(x, y) + highlighted_segment, end="")

                hint = match["hint"]
                # Use pure function to determine hint styling
                hint_display = determine_hint_style(
                    hint,
                    current_hint_input,
                    style_hint_default,
                    style_hint_typed,
                    style_hint_pending,
                    style_hint_inactive,
                    term.normal,
                )
                print(term.move_xy(x, y) + hint_display, end="")

            sys.stdout.flush()

            # Check if current input should trigger selection
            input_has_matches, should_select = is_valid_hint_input(
                current_hint_input, hint_to_content
            )
            if should_select:
                selected_text = hint_to_content[current_hint_input]
                break

            # Handle keyboard input
            key = term.inkey()
            if key.is_sequence:
                if key.name in ("KEY_ESCAPE", "KEY_CTRL_C"):
                    break  # Exit without selection
                if key.name == "KEY_BACKSPACE":
                    if current_hint_input:
                        current_hint_input = current_hint_input[
                            :-1
                        ]  # Remove last character
            elif not key.is_sequence and key:
                # Only accept characters from the current alphabet
                alphabet = ALPHABETS.get(DEFAULT_ALPHABET, ALPHABETS["vim-movement"])
                if key.lower() in alphabet:
                    current_hint_input += key.lower()  # Add character to input
                    # Check if input has matches
                    input_has_matches, _ = is_valid_hint_input(
                        current_hint_input, hint_to_content
                    )
                    # Exit if input is not empty and has no matches
                    if current_hint_input and not input_has_matches:
                        current_hint_input = current_hint_input[
                            :-1
                        ]  # Remove invalid character
    return selected_text


def copy_to_clipboard(text: str) -> bool:
    """Copy text to system clipboard using platform-specific commands.

    Supports macOS (pbcopy) and Linux (xclip/xsel) clipboard utilities.

    Args:
        text: Text string to copy to clipboard

    Returns:
        True if copy operation succeeded, False otherwise
    """
    if not text:
        return False
    try:
        if sys.platform == "darwin":
            subprocess.run(["pbcopy"], input=text.encode("utf-8"), check=True)
        elif sys.platform.startswith("linux"):
            try:
                subprocess.run(
                    ["xclip", "-selection", "clipboard"],
                    input=text.encode("utf-8"),
                    check=True,
                )
            except (FileNotFoundError, subprocess.CalledProcessError):
                subprocess.run(
                    ["xsel", "--clipboard", "--input"],
                    input=text.encode("utf-8"),
                    check=True,
                )
        else:
            return False  # Unsupported platform
        return True
    except (FileNotFoundError, subprocess.CalledProcessError):
        return False


def main() -> None:
    """Main entry point for the tmux text capture and selection tool.

    Captures tmux pane content, finds text patterns (URLs, git commits, emails,
    IP addresses with optional ports, file paths, MAC addresses, UUIDs, hex colors,
    markdown links, git diff files, Docker SHA256 hashes, IPv6 addresses, memory addresses,
    IPFS hashes, and large numbers), displays an interactive interface for selection,
    and copies chosen text to clipboard.

    Accepts optional pane ID as command line argument.

    Features native terminal control that automatically detects and fixes stdin
    redirection issues, making it work reliably in all environments (direct execution,
    tmux, shell scripts) without requiring external shell redirections.
    """
    # Establish proper terminal control before any other operations
    # This makes the application behave like nvim - automatically handling
    # stdin redirection and ensuring keyboard input works in all environments
    if not ensure_terminal_control():
        print("Warning: Running with limited terminal control.", file=sys.stderr)

    try:
        subprocess.run(
            ["tmux", "display-message", "-p", "#S"], check=True, capture_output=True
        )
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Error: tmux is not running or not found.", file=sys.stderr)
        sys.exit(1)

    # Get target pane ID from command line argument if provided
    target_pane = sys.argv[1] if len(sys.argv) > 1 else None

    original_ansi_lines = get_tmux_pane_content(target_pane)
    if not original_ansi_lines or original_ansi_lines[0].startswith("Error:"):
        if original_ansi_lines:
            print(original_ansi_lines[0], file=sys.stderr)
        sys.exit(1)

    # Create terminal instance - blessed will automatically handle terminal I/O
    # When stdin is redirected, blessed.Terminal.inkey() will automatically
    # open /dev/tty for keyboard input, making it work in all environments
    term = blessed.Terminal()

    # Find all text matches using the terminal instance
    found_matches = find_text_matches(original_ansi_lines, REGEX_PATTERNS, term)

    if not found_matches:
        print("No matches found in the target pane.", file=sys.stderr)
        sys.exit(0)

    selected_text = None
    try:
        # Run interactive interface - blessed handles TTY detection automatically
        selected_text = run_blessed_app(term, original_ansi_lines, found_matches)
    except KeyboardInterrupt:
        print("\nOperation cancelled.", file=sys.stderr)
        sys.exit(0)
    except Exception as e:
        print(f"Error during interactive session: {e}", file=sys.stderr)
        sys.exit(1)

    if selected_text:
        if copy_to_clipboard(selected_text):
            print(f"Copied '{selected_text}' to clipboard.")
        else:
            print(
                "Failed to copy to clipboard. Ensure xclip or xsel is installed on Linux.",
                file=sys.stderr,
            )
    else:
        print("Operation cancelled.")


if __name__ == "__main__":
    main()
